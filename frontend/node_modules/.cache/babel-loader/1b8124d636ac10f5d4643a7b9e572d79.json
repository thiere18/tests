{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useFormState } from 'react-final-form';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\n\nvar useWarnWhenUnsavedChanges = function (enable, formRootPathname) {\n  var history = useHistory();\n  var translate = useTranslate();\n\n  var _a = useFormState(UseFormStateSubscription),\n      pristine = _a.pristine,\n      submitSucceeded = _a.submitSucceeded,\n      submitting = _a.submitting;\n\n  var initialLocation = useRef(formRootPathname || history.location.pathname);\n  useEffect(function () {\n    if (!enable) {\n      return;\n    }\n\n    var release = history.block(function (location) {\n      var isInsideForm = location.pathname.startsWith(initialLocation.current);\n\n      if (!pristine && !isInsideForm && !submitSucceeded && !submitting) {\n        return translate('ra.message.unsaved_changes');\n      }\n\n      return undefined;\n    });\n    return function () {\n      if (release) {\n        release();\n      }\n    };\n  }, [pristine, enable, history, translate, submitSucceeded, submitting]);\n};\n\nvar UseFormStateSubscription = {\n  // For some reason, subscribing only to pristine does not rerender when a field become dirty\n  // because it has a defaultValue (not initialValue as setting an initialValue does not make the field dirty)\n  subscription: {\n    pristine: true,\n    dirtyFields: true,\n    submitSucceeded: true,\n    submitting: true\n  }\n};\nexport default useWarnWhenUnsavedChanges;","map":{"version":3,"sources":["/node_modules/ra-core/esm/form/useWarnWhenUnsavedChanges.js"],"names":["useEffect","useRef","useFormState","useHistory","useTranslate","useWarnWhenUnsavedChanges","enable","formRootPathname","history","translate","_a","UseFormStateSubscription","pristine","submitSucceeded","submitting","initialLocation","location","pathname","release","block","isInsideForm","startsWith","current","undefined","subscription","dirtyFields"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,yBAAyB,GAAG,UAAUC,MAAV,EAAkBC,gBAAlB,EAAoC;AAChE,MAAIC,OAAO,GAAGL,UAAU,EAAxB;AACA,MAAIM,SAAS,GAAGL,YAAY,EAA5B;;AACA,MAAIM,EAAE,GAAGR,YAAY,CAACS,wBAAD,CAArB;AAAA,MAAiDC,QAAQ,GAAGF,EAAE,CAACE,QAA/D;AAAA,MAAyEC,eAAe,GAAGH,EAAE,CAACG,eAA9F;AAAA,MAA+GC,UAAU,GAAGJ,EAAE,CAACI,UAA/H;;AACA,MAAIC,eAAe,GAAGd,MAAM,CAACM,gBAAgB,IAAIC,OAAO,CAACQ,QAAR,CAAiBC,QAAtC,CAA5B;AACAjB,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACM,MAAL,EAAa;AACT;AACH;;AACD,QAAIY,OAAO,GAAGV,OAAO,CAACW,KAAR,CAAc,UAAUH,QAAV,EAAoB;AAC5C,UAAII,YAAY,GAAGJ,QAAQ,CAACC,QAAT,CAAkBI,UAAlB,CAA6BN,eAAe,CAACO,OAA7C,CAAnB;;AACA,UAAI,CAACV,QAAD,IAAa,CAACQ,YAAd,IAA8B,CAACP,eAA/B,IAAkD,CAACC,UAAvD,EAAmE;AAC/D,eAAOL,SAAS,CAAC,4BAAD,CAAhB;AACH;;AACD,aAAOc,SAAP;AACH,KANa,CAAd;AAOA,WAAO,YAAY;AACf,UAAIL,OAAJ,EAAa;AACTA,QAAAA,OAAO;AACV;AACJ,KAJD;AAKH,GAhBQ,EAgBN,CAACN,QAAD,EAAWN,MAAX,EAAmBE,OAAnB,EAA4BC,SAA5B,EAAuCI,eAAvC,EAAwDC,UAAxD,CAhBM,CAAT;AAiBH,CAtBD;;AAuBA,IAAIH,wBAAwB,GAAG;AAC3B;AACA;AACAa,EAAAA,YAAY,EAAE;AACVZ,IAAAA,QAAQ,EAAE,IADA;AAEVa,IAAAA,WAAW,EAAE,IAFH;AAGVZ,IAAAA,eAAe,EAAE,IAHP;AAIVC,IAAAA,UAAU,EAAE;AAJF;AAHa,CAA/B;AAUA,eAAeT,yBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useFormState } from 'react-final-form';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nvar useWarnWhenUnsavedChanges = function (enable, formRootPathname) {\n    var history = useHistory();\n    var translate = useTranslate();\n    var _a = useFormState(UseFormStateSubscription), pristine = _a.pristine, submitSucceeded = _a.submitSucceeded, submitting = _a.submitting;\n    var initialLocation = useRef(formRootPathname || history.location.pathname);\n    useEffect(function () {\n        if (!enable) {\n            return;\n        }\n        var release = history.block(function (location) {\n            var isInsideForm = location.pathname.startsWith(initialLocation.current);\n            if (!pristine && !isInsideForm && !submitSucceeded && !submitting) {\n                return translate('ra.message.unsaved_changes');\n            }\n            return undefined;\n        });\n        return function () {\n            if (release) {\n                release();\n            }\n        };\n    }, [pristine, enable, history, translate, submitSucceeded, submitting]);\n};\nvar UseFormStateSubscription = {\n    // For some reason, subscribing only to pristine does not rerender when a field become dirty\n    // because it has a defaultValue (not initialValue as setting an initialValue does not make the field dirty)\n    subscription: {\n        pristine: true,\n        dirtyFields: true,\n        submitSucceeded: true,\n        submitting: true,\n    },\n};\nexport default useWarnWhenUnsavedChanges;\n"]},"metadata":{},"sourceType":"module"}