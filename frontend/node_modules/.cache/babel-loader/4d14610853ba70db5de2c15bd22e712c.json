{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useDelete } from '../../dataProvider';\nimport { CRUD_DELETE } from '../../actions';\nimport { useRefresh, useNotify, useRedirect } from '../../sideEffect';\nimport { useResourceContext } from '../../core';\n/**\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\n *\n * @example\n *\n * const DeleteButton = ({\n *     resource,\n *     record,\n *     basePath,\n *     redirect,\n *     onClick,\n *     ...rest\n * }) => {\n *     const {\n *         open,\n *         loading,\n *         handleDialogOpen,\n *         handleDialogClose,\n *         handleDelete,\n *     } = useDeleteWithConfirmController({\n *         resource,\n *         record,\n *         redirect,\n *         basePath,\n *         onClick,\n *     });\n *\n *     return (\n *         <Fragment>\n *             <Button\n *                 onClick={handleDialogOpen}\n *                 label=\"ra.action.delete\"\n *                 {...rest}\n *             >\n *                 {icon}\n *             </Button>\n *             <Confirm\n *                 isOpen={open}\n *                 loading={loading}\n *                 title=\"ra.message.delete_title\"\n *                 content=\"ra.message.delete_content\"\n *                 translateOptions={{\n *                     name: resource,\n *                     id: record.id,\n *                 }}\n *                 onConfirm={handleDelete}\n *                 onClose={handleDialogClose}\n *             />\n *         </Fragment>\n *     );\n * };\n */\n\nvar useDeleteWithConfirmController = function (props) {\n  var record = props.record,\n      redirectTo = props.redirect,\n      basePath = props.basePath,\n      mutationMode = props.mutationMode,\n      onClick = props.onClick,\n      onSuccess = props.onSuccess,\n      onFailure = props.onFailure;\n  var resource = useResourceContext(props);\n\n  var _a = useState(false),\n      open = _a[0],\n      setOpen = _a[1];\n\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n\n  var _b = useDelete(resource, null, null, {\n    action: CRUD_DELETE,\n    onSuccess: function (response) {\n      setOpen(false);\n\n      if (onSuccess === undefined) {\n        notify('ra.notification.deleted', {\n          type: 'info',\n          messageArgs: {\n            smart_count: 1\n          },\n          undoable: mutationMode === 'undoable'\n        });\n        redirect(redirectTo, basePath || \"/\" + resource);\n        refresh();\n      } else {\n        onSuccess(response);\n      }\n    },\n    onFailure: function (error) {\n      setOpen(false);\n\n      if (onFailure === undefined) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'warning',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n        refresh();\n      } else {\n        onFailure(error);\n      }\n    },\n    mutationMode: mutationMode\n  }),\n      deleteOne = _b[0],\n      loading = _b[1].loading;\n\n  var handleDialogOpen = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  var handleDialogClose = function (e) {\n    setOpen(false);\n    e.stopPropagation();\n  };\n\n  var handleDelete = useCallback(function (event) {\n    event.stopPropagation();\n    deleteOne({\n      payload: {\n        id: record.id,\n        previousData: record\n      }\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [deleteOne, onClick, record]);\n  return {\n    open: open,\n    loading: loading,\n    handleDialogOpen: handleDialogOpen,\n    handleDialogClose: handleDialogClose,\n    handleDelete: handleDelete\n  };\n};\n\nexport default useDeleteWithConfirmController;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/button/useDeleteWithConfirmController.js"],"names":["useState","useCallback","useDelete","CRUD_DELETE","useRefresh","useNotify","useRedirect","useResourceContext","useDeleteWithConfirmController","props","record","redirectTo","redirect","basePath","mutationMode","onClick","onSuccess","onFailure","resource","_a","open","setOpen","notify","refresh","_b","action","response","undefined","type","messageArgs","smart_count","undoable","error","message","_","deleteOne","loading","handleDialogOpen","e","stopPropagation","handleDialogClose","handleDelete","event","payload","id","previousData"],"mappings":"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","sourcesContent":["import { useState, useCallback, } from 'react';\nimport { useDelete } from '../../dataProvider';\nimport { CRUD_DELETE } from '../../actions';\nimport { useRefresh, useNotify, useRedirect, } from '../../sideEffect';\nimport { useResourceContext } from '../../core';\n/**\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\n *\n * @example\n *\n * const DeleteButton = ({\n *     resource,\n *     record,\n *     basePath,\n *     redirect,\n *     onClick,\n *     ...rest\n * }) => {\n *     const {\n *         open,\n *         loading,\n *         handleDialogOpen,\n *         handleDialogClose,\n *         handleDelete,\n *     } = useDeleteWithConfirmController({\n *         resource,\n *         record,\n *         redirect,\n *         basePath,\n *         onClick,\n *     });\n *\n *     return (\n *         <Fragment>\n *             <Button\n *                 onClick={handleDialogOpen}\n *                 label=\"ra.action.delete\"\n *                 {...rest}\n *             >\n *                 {icon}\n *             </Button>\n *             <Confirm\n *                 isOpen={open}\n *                 loading={loading}\n *                 title=\"ra.message.delete_title\"\n *                 content=\"ra.message.delete_content\"\n *                 translateOptions={{\n *                     name: resource,\n *                     id: record.id,\n *                 }}\n *                 onConfirm={handleDelete}\n *                 onClose={handleDialogClose}\n *             />\n *         </Fragment>\n *     );\n * };\n */\nvar useDeleteWithConfirmController = function (props) {\n    var record = props.record, redirectTo = props.redirect, basePath = props.basePath, mutationMode = props.mutationMode, onClick = props.onClick, onSuccess = props.onSuccess, onFailure = props.onFailure;\n    var resource = useResourceContext(props);\n    var _a = useState(false), open = _a[0], setOpen = _a[1];\n    var notify = useNotify();\n    var redirect = useRedirect();\n    var refresh = useRefresh();\n    var _b = useDelete(resource, null, null, {\n        action: CRUD_DELETE,\n        onSuccess: function (response) {\n            setOpen(false);\n            if (onSuccess === undefined) {\n                notify('ra.notification.deleted', {\n                    type: 'info',\n                    messageArgs: { smart_count: 1 },\n                    undoable: mutationMode === 'undoable',\n                });\n                redirect(redirectTo, basePath || \"/\" + resource);\n                refresh();\n            }\n            else {\n                onSuccess(response);\n            }\n        },\n        onFailure: function (error) {\n            setOpen(false);\n            if (onFailure === undefined) {\n                notify(typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error', {\n                    type: 'warning',\n                    messageArgs: {\n                        _: typeof error === 'string'\n                            ? error\n                            : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                });\n                refresh();\n            }\n            else {\n                onFailure(error);\n            }\n        },\n        mutationMode: mutationMode,\n    }), deleteOne = _b[0], loading = _b[1].loading;\n    var handleDialogOpen = function (e) {\n        setOpen(true);\n        e.stopPropagation();\n    };\n    var handleDialogClose = function (e) {\n        setOpen(false);\n        e.stopPropagation();\n    };\n    var handleDelete = useCallback(function (event) {\n        event.stopPropagation();\n        deleteOne({\n            payload: { id: record.id, previousData: record },\n        });\n        if (typeof onClick === 'function') {\n            onClick(event);\n        }\n    }, [deleteOne, onClick, record]);\n    return { open: open, loading: loading, handleDialogOpen: handleDialogOpen, handleDialogClose: handleDialogClose, handleDelete: handleDelete };\n};\nexport default useDeleteWithConfirmController;\n"]},"metadata":{},"sourceType":"module"}